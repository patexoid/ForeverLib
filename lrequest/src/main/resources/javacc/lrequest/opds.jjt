
options {
    MULTI = true;
    NODE_PREFIX = "";

}

PARSER_BEGIN(LibRequestBuilder)
package  com.patex.lrequest;

public class LibRequestBuilder {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    java.io.InputStream is=new java.io.ByteArrayInputStream("Author:page(number=2, jk=перевава):alphabet".getBytes());
    LibRequestBuilder t = new LibRequestBuilder(is, java.nio.charset.Charset.forName("UTF-8"));
    try {
          SimpleNode n = t.Request();
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
  }
}

PARSER_END(LibRequestBuilder)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{

  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
< VALUE: (<LETTER>|<DIGIT>|<CYRILIC> )+ >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #CYRILIC: ["а"-"я","А"-"Я"] >
|
  < #DIGIT: ["0"-"9"] >
}


SimpleNode Request():
{
   Token t;
}
{
   t=<IDENTIFIER>{jjtThis.jjtSetValue(t.image);}
   ":"Action()(":"Action())*
{ return jjtThis; }
}

void Action():
{
   Token t;
}
{
  t=<IDENTIFIER>{jjtThis.jjtSetValue(t.image);} ("("  Param() (","Param())* ")")?
}

void Param():
{
   Token t;
}
{
 t=<IDENTIFIER>{jjtThis.setName(t.image);}
 "="
 t=<VALUE> {jjtThis.setValue(t.image);}
}