
options {
    MULTI = true;
    NODE_PREFIX = "";

}

PARSER_BEGIN(LibRequestBuilder)
package  com.patex.lrequest;

public class LibRequestBuilder {

}

PARSER_END(LibRequestBuilder)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{

< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
< NUMBER: (<DIGIT>)+ >
|
< STRING_VALUE: (<LETTER>|<DIGIT>|<CYRILIC>|" ")+ >// todo should work with all chars

|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #CYRILIC: ["а"-"я","А"-"Я"] >
|
  < #DIGIT: ["0"-"9"] >

}


SimpleNode Request():
{
   Token t;
}
{
   Action()("."Action())*
{ return jjtThis; }
}

void Action():
{
   Token t;
}
{
  t=<IDENTIFIER>{jjtThis.jjtSetValue(t.image);}
  ("("  (Request() |NumericParam()|StringParam()) (","Request()|NumericParam()|StringParam())* ")")?
}

void NumericParam():
{
   Token t;
}
{
  t=<NUMBER>{jjtThis.setValue(t.image);}
}

void StringParam():
{
   Token t;
}
{
("\""
(
  t=<IDENTIFIER> {jjtThis.setValue(t.image);}
  |
  t=<STRING_VALUE>{jjtThis.setValue(t.image);}

)
"\"")
|
"\"\""{jjtThis.setValue("");}
}

